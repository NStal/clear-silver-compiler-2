// Generated by CoffeeScript 1.6.3
var InitHDFReader;

InitHDFReader = function() {
  var hdfToJson, parseHDFDict, reg;
  reg = {};
  reg.space = /\s/i;
  reg.hdfQuery = /[a-z0-9_.]/i;
  parseHDFDict = function(string, start, hdfDict, current) {
    var index, queryStart, subQuery, value, valueEnd, valueStart;
    index = start;
    while (true) {
      while (reg.space.test(string[index])) {
        index++;
      }
      if (!string[index] || string[index] === "}") {
        return index;
      }
      queryStart = index;
      while (reg.hdfQuery.test(string[index])) {
        index++;
      }
      if (!string[index]) {
        throw new Error("Unexpect HDF End");
      }
      subQuery = string.substring(queryStart, index);
      while (new RegExp(" ", "i").test(string[index])) {
        index++;
      }
      if (string[index] === "=") {
        index++;
        while (new RegExp(" ", "i").test(string[index])) {
          index++;
        }
        valueStart = index;
        valueEnd = string.indexOf("\n", index);
        value = string.substring(valueStart, valueEnd);
        index = valueEnd + 1;
        hdfDict.push({
          path: [current, subQuery].join("."),
          value: value
        });
        continue;
      } else if (string[index] === "{") {
        index++;
        index = parseHDFDict(string, index + 1, hdfDict, [current, subQuery].join("."));
        if (string[index] !== "}") {
          throw new Error("unclosed {");
        }
        index++;
        continue;
      } else if (string[index] === ":") {
        while (new RegExp(" ", "i").test(string[index])) {
          index++;
        }
        valueStart = index;
        valueEnd = string.indexOf("\n", index);
        value = string.substring(valueStart, valueEnd);
        index = valueEnd + 1;
        hdfDict.push({
          path: [current, subQuery].join("."),
          value: value.trim(),
          refer: true
        });
        continue;
      } else {
        throw new Error("Unexpect Token at index " + index + ":" + string[index]);
      }
    }
  };
  hdfToJson = function(string) {
    var dict, item, json, route, routes, _i, _j, _len, _len1, _refer;
    dict = [];
    parseHDFDict(string, 0, dict, "root");
    json = {};
    for (_i = 0, _len = dict.length; _i < _len; _i++) {
      item = dict[_i];
      routes = item.path.split(".");
      _refer = json;
      for (_j = 0, _len1 = routes.length; _j < _len1; _j++) {
        route = routes[_j];
        if (route.indexOf("____") === 0) {
          console.warn("hdf query path can't start with ____");
          return null;
        }
        if (!_refer[route]) {
          _refer[route] = {};
        }
        _refer = _refer[route];
      }
      if (item.refer) {
        console.warn("current not support refering");
        continue;
      }
      _refer.____value = item.value;
    }
    return json.root;
  };
  if (exports) {
    exports.parseHDFDict = parseHDFDict;
    return exports.hdfToJson = hdfToJson;
  }
};

InitHDFReader();

// Generated by CoffeeScript 1.6.3
var CSEcho, CSIf, CSOperate_add, CSOperate_dotRef, CSOperate_dynamicRef, CSOperate_forceHDFRef, CSOperate_forceNumber, CSOperate_isEqual, CSValue, CSVar, Dataset, HDF, HDFPath, HdfGet, HdfRef, HdfSet, ToHDF, fs, hdfString, json, outputBuffers, _CSValue;

fs = require("fs");

HDFPath = process.argv[2];

if (!HDFPath) {
  console.log("need an hdf path");
  process.exit(0);
}

hdfString = fs.readFileSync(HDFPath).toString();

json = exports.hdfToJson(hdfString);

outputBuffers = [];

_CSValue = (function() {
  function _CSValue(value, type) {
    if (!type) {
      type = "None";
    }
    this.type = type;
    this.value = value;
  }

  _CSValue.prototype.toPrimitive = function() {
    if (this.type === "number" || this.type === "string") {
      return this.value || 0;
    }
    if (this.type === "hdfQuery") {
      if (!this.hdfNode || "") {
        this.hdfNode = Dataset.get(this.value);
      }
      return this.hdfNode.____value.toPrimitive() || "";
    }
    if (this.type === "None") {
      return "";
    }
    throw new Error("Unknow value type");
  };

  return _CSValue;

})();

CSValue = function(v, t) {
  return new _CSValue(v, t);
};

HDF = (function() {
  function HDF(json) {
    this.data = json;
    this.regulize(this.data);
  }

  HDF.prototype.regulize = function(json) {
    var item, _results;
    if (typeof json.____value !== "undefined" && !json.____value.type) {
      json.____value = CSValue(json.____value, "string");
    }
    _results = [];
    for (item in json) {
      if (item === "____value") {
        continue;
      }
      if (typeof json[item] === "string" || typeof json[item] === "number") {
        _results.push(json[item] = {
          ____value: CSValue(json[item], "string")
        });
      } else {
        _results.push(this.regulize(json[item]));
      }
    }
    return _results;
  };

  HDF.prototype.get = function(path, root) {
    var cur, pathes, route;
    if (!path) {
      throw new Error("get empty hdf");
    }
    pathes = path.split(".");
    if (!root) {
      cur = this.data;
    } else {
      cur = root;
    }
    while (pathes.length > 0) {
      route = pathes.shift();
      if (!cur[route]) {
        cur[route] = {};
      }
      if (!cur[route].____value) {
        cur[route].____value = new _CSValue();
      }
      cur = cur[route];
    }
    return cur;
  };

  HDF.prototype.set = function(path, value) {
    var cur, pathes, route;
    if (!path) {
      throw new Error("get empty hdf");
    }
    pathes = path.split(".");
    cur = this.data;
    while (pathes.length > 0) {
      route = pathes.shift();
      if (!cur[route]) {
        cur[route] = {};
      }
      if (!cur[route].____value) {
        cur[route].____value = new _CSValue();
      }
      cur = cur[route];
    }
    cur.____value = value;
    return cur;
  };

  HDF.prototype.getNode = function(path) {
    var cur, item, nodes, pathes, route;
    if (!path) {
      throw Error("get empty hdf");
    }
    pathes = path.split(".");
    cur = this.data;
    while (pathes.length > 0) {
      route = pathes.shift();
      if (!cur[route]) {
        cur[route] = {};
      }
      if (!cur[route].____value) {
        cur[route].____value = new _CSValue();
      }
      cur = cur[route];
    }
    nodes = [];
    for (item in cur) {
      if (item !== "____value") {
        if (!cur[item].____value) {
          cur[item].____value = new _CSValue();
        }
        nodes.push(cur[item]);
      }
    }
    return {
      nodes: nodes,
      ____value: cur.____value || CSValue("", "string")
    };
  };

  return HDF;

})();

Dataset = new HDF(json);

CSVar = function(value) {
  return outputBuffers.push(value.toPrimitive().toString());
};

CSEcho = function(string) {
  return outputBuffers.push(string);
};

CSIf = function(v) {
  if (v === true) {
    return true;
  }
  if (v === false) {
    return false;
  }
  if (v && v.value) {
    return true;
  }
  return false;
};

HdfSet = function(path, value) {
  if (typeof value.toPrimitive === "function") {
    return Dataset.set(path, value);
  }
};

HdfGet = function(path) {
  return Dataset.get(path);
};

HdfRef = function(ref, node) {
  return Dataset.data[ref] = node;
};

ToHDF = function(v) {
  var node;
  console.assert(v.type === "hdfQuery");
  return node = Dataset.getNode(v.value);
};

CSOperate_dynamicRef = function(v1, v2) {
  var hdfNode, path, v3;
  console.assert(v1.type === "hdfQuery");
  path = v2.toPrimitive();
  if (!v1.hdfNode) {
    v1.hdfNode = Dataset.get(v1.value);
  }
  hdfNode = Dataset.get(path, v1.hdfNode);
  v3 = CSValue(v1.value + "." + path, "hdfQuery");
  v3.hdfNode = hdfNode;
  return v3;
};

CSOperate_dotRef = function(v1, v2) {
  var e, hdfNode, path, v3;
  try {
    console.assert(v1.type === "hdfQuery");
    console.assert(v2.type === "hdfQuery");
  } catch (_error) {
    e = _error;
    throw new Error("Invalid DotRef");
  }
  path = v2.value;
  if (!v1.hdfNode) {
    v1.hdfNode = Dataset.get(v1.value);
  }
  hdfNode = Dataset.get(path, v1.hdfNode);
  v3 = CSValue(v1.value + "." + path, "hdfQuery");
  v3.hdfNode = hdfNode;
  return v3;
};

CSOperate_forceNumber = function(v) {
  if (v.type === "number") {
    return v;
  } else {
    return CSValue(parseInt(v.value) || 0, "number");
  }
};

CSOperate_add = function(v1, v2) {
  var result;
  if (!v2) {
    return v1;
  }
  result = (v1.toPrimitive() + v2.toPrimitive()) || "";
  if (typeof result === "number") {
    return CSValue(result, "number");
  } else {
    return CSValue(result.toString(), "string");
  }
};

CSOperate_isEqual = function(v1, v2) {
  return v1.toPrimitive().toString() === v2.toPrimitive().toString();
};

CSOperate_forceHDFRef = function(v) {
  return v;
};

function main(){

CSEcho('\n');
CSEcho('\n\n\n');
CSEcho('\n\nbefore weekday\n\n');
//call-expand Date._weekday
var __CSVar_65=CSValue('Wow','hdfQuery');
var __CSVar_66=CSValue('Foo','hdfQuery');
var __CSVar_64=CSOperate_dotRef(__CSVar_65,__CSVar_66);
var __CSVar_68=CSValue('5','hdfQuery');
var __CSVar_67=CSOperate_forceNumber(__CSVar_68);
CSEcho('\n');
var __CSVar_69=CSValue('Days','hdfQuery');
var refer = __CSVar_69;
refer = ToHDF(refer)
for(var index=0;index<refer.nodes.length;index++){
    HdfRef('wday',refer.nodes[index]);
    CSEcho('\n  ');
(function(){
    var __CSVar_71=CSValue('wday','hdfQuery');
var __CSVar_73=CSValue('Wow','hdfQuery');
var __CSVar_74=CSValue('Foo','hdfQuery');
var __CSVar_72=CSOperate_dotRef(__CSVar_73,__CSVar_74);
var __CSVar_70=CSOperate_isEqual(__CSVar_71,__CSVar_72);
    if(CSIf(__CSVar_70)){
        CSEcho('\n    ');
var __CSVar_76=CSValue('wday','hdfQuery');
var __CSVar_77=CSValue('Abbr','hdfQuery');
var __CSVar_75=CSOperate_dotRef(__CSVar_76,__CSVar_77);
CSVar(__CSVar_75);
CSEcho('\n  ');
        return;
    }
    
    
})()
CSEcho('\n');
    
}
CSEcho('\n');
(function(){
    var __CSVar_80=CSValue('Wow','hdfQuery');
var __CSVar_81=CSValue('Foo','hdfQuery');
var __CSVar_79=CSOperate_dotRef(__CSVar_80,__CSVar_81);
var __CSVar_82=CSValue('6','string');
var __CSVar_78=CSOperate_isEqual(__CSVar_79,__CSVar_82);
    if(CSIf(__CSVar_78)){
        CSEcho('\n');
var __CSVar_85=CSValue('Days','hdfQuery');
var __CSVar_86=CSValue('0','hdfQuery');
var __CSVar_84=CSOperate_dotRef(__CSVar_85,__CSVar_86);
var __CSVar_87=CSValue('Abbr','hdfQuery');
var __CSVar_83=CSOperate_dotRef(__CSVar_84,__CSVar_87);
CSVar(__CSVar_83);
CSEcho('\n');
        return;
    }
    var __CSVar_90=CSValue('Wow','hdfQuery');
var __CSVar_91=CSValue('Foo','hdfQuery');
var __CSVar_89=CSOperate_dotRef(__CSVar_90,__CSVar_91);
var __CSVar_92=CSValue('0','string');
var __CSVar_88=CSOperate_isEqual(__CSVar_89,__CSVar_92);
if(__CSVar_88){
    CSEcho('\n');
var __CSVar_95=CSValue('Days','hdfQuery');
var __CSVar_96=CSValue('1','hdfQuery');
var __CSVar_94=CSOperate_dotRef(__CSVar_95,__CSVar_96);
var __CSVar_97=CSValue('Abbr','hdfQuery');
var __CSVar_93=CSOperate_dotRef(__CSVar_94,__CSVar_97);
CSVar(__CSVar_93);
CSEcho('\n');
    return;
}

var __CSVar_100=CSValue('Wow','hdfQuery');
var __CSVar_101=CSValue('Foo','hdfQuery');
var __CSVar_99=CSOperate_dotRef(__CSVar_100,__CSVar_101);
var __CSVar_102=CSValue('1','string');
var __CSVar_98=CSOperate_isEqual(__CSVar_99,__CSVar_102);
if(__CSVar_98){
    CSEcho('\n');
var __CSVar_105=CSValue('Days','hdfQuery');
var __CSVar_106=CSValue('2','hdfQuery');
var __CSVar_104=CSOperate_dotRef(__CSVar_105,__CSVar_106);
var __CSVar_107=CSValue('Abbr','hdfQuery');
var __CSVar_103=CSOperate_dotRef(__CSVar_104,__CSVar_107);
CSVar(__CSVar_103);
CSEcho('\n');
    return;
}

var __CSVar_110=CSValue('Wow','hdfQuery');
var __CSVar_111=CSValue('Foo','hdfQuery');
var __CSVar_109=CSOperate_dotRef(__CSVar_110,__CSVar_111);
var __CSVar_112=CSValue('2','string');
var __CSVar_108=CSOperate_isEqual(__CSVar_109,__CSVar_112);
if(__CSVar_108){
    CSEcho('\n');
var __CSVar_115=CSValue('Days','hdfQuery');
var __CSVar_116=CSValue('3','hdfQuery');
var __CSVar_114=CSOperate_dotRef(__CSVar_115,__CSVar_116);
var __CSVar_117=CSValue('Abbr','hdfQuery');
var __CSVar_113=CSOperate_dotRef(__CSVar_114,__CSVar_117);
CSVar(__CSVar_113);
CSEcho('\n');
    return;
}

var __CSVar_120=CSValue('Wow','hdfQuery');
var __CSVar_121=CSValue('Foo','hdfQuery');
var __CSVar_119=CSOperate_dotRef(__CSVar_120,__CSVar_121);
var __CSVar_122=CSValue('3','string');
var __CSVar_118=CSOperate_isEqual(__CSVar_119,__CSVar_122);
if(__CSVar_118){
    CSEcho('\n');
var __CSVar_125=CSValue('Days','hdfQuery');
var __CSVar_126=CSValue('4','hdfQuery');
var __CSVar_124=CSOperate_dotRef(__CSVar_125,__CSVar_126);
var __CSVar_127=CSValue('Abbr','hdfQuery');
var __CSVar_123=CSOperate_dotRef(__CSVar_124,__CSVar_127);
CSVar(__CSVar_123);
CSEcho('\n');
    return;
}

var __CSVar_130=CSValue('Wow','hdfQuery');
var __CSVar_131=CSValue('Foo','hdfQuery');
var __CSVar_129=CSOperate_dotRef(__CSVar_130,__CSVar_131);
var __CSVar_132=CSValue('4','string');
var __CSVar_128=CSOperate_isEqual(__CSVar_129,__CSVar_132);
if(__CSVar_128){
    CSEcho('\n');
var __CSVar_135=CSValue('Days','hdfQuery');
var __CSVar_136=CSValue('5','hdfQuery');
var __CSVar_134=CSOperate_dotRef(__CSVar_135,__CSVar_136);
var __CSVar_137=CSValue('Abbr','hdfQuery');
var __CSVar_133=CSOperate_dotRef(__CSVar_134,__CSVar_137);
CSVar(__CSVar_133);
CSEcho('\n');
    return;
}

var __CSVar_140=CSValue('Wow','hdfQuery');
var __CSVar_141=CSValue('Foo','hdfQuery');
var __CSVar_139=CSOperate_dotRef(__CSVar_140,__CSVar_141);
var __CSVar_142=CSValue('5','string');
var __CSVar_138=CSOperate_isEqual(__CSVar_139,__CSVar_142);
if(__CSVar_138){
    CSEcho('\n');
var __CSVar_145=CSValue('Days','hdfQuery');
var __CSVar_146=CSValue('6','hdfQuery');
var __CSVar_144=CSOperate_dotRef(__CSVar_145,__CSVar_146);
var __CSVar_147=CSValue('Abbr','hdfQuery');
var __CSVar_143=CSOperate_dotRef(__CSVar_144,__CSVar_147);
CSVar(__CSVar_143);
CSEcho('\n');
    return;
}

    
})()
CSEcho('\n');
CSEcho('\n\nbefore echo\n\necho a variable: 3\n');
//call-expand echo
var __CSVar_149=CSValue('Wow','hdfQuery');
var __CSVar_150=CSValue('Foo','hdfQuery');
var __CSVar_148=CSOperate_dotRef(__CSVar_149,__CSVar_150);
CSEcho('\n  ');
var __CSVar_153=CSValue('Wow','hdfQuery');
var __CSVar_154=CSValue('Foo','hdfQuery');
var __CSVar_152=CSOperate_dotRef(__CSVar_153,__CSVar_154);
var __CSVar_151=CSOperate_forceHDFRef(__CSVar_152);
CSVar(__CSVar_151);
CSEcho('\n');
CSEcho('\necho a string: hellow world\n');
//call-expand echo
var __CSVar_155=CSValue('hello world','string');
CSEcho('\n  ');
var __CSVar_157=CSValue('hello world','string');
var __CSVar_156=CSOperate_forceHDFRef(__CSVar_157);
CSVar(__CSVar_156);
CSEcho('\n');
CSEcho('\necho a number: 5\n');
//call-expand echo
var __CSVar_159=CSValue('5','hdfQuery');
var __CSVar_158=CSOperate_forceNumber(__CSVar_159);
CSEcho('\n  ');
var __CSVar_162=CSValue('5','hdfQuery');
var __CSVar_161=CSOperate_forceNumber(__CSVar_162);
var __CSVar_160=CSOperate_forceHDFRef(__CSVar_161);
CSVar(__CSVar_160);
CSEcho('\n');
CSEcho('\n\n');
CSEcho('\n\necho a variable: 3\n');
//call-expand call_echo
var __CSVar_164=CSValue('Wow','hdfQuery');
var __CSVar_165=CSValue('Foo','hdfQuery');
var __CSVar_163=CSOperate_dotRef(__CSVar_164,__CSVar_165);
CSEcho('\n');
//call-expand echo
var __CSVar_167=CSValue('Wow','hdfQuery');
var __CSVar_168=CSValue('Foo','hdfQuery');
var __CSVar_166=CSOperate_dotRef(__CSVar_167,__CSVar_168);
CSEcho('\n  ');
var __CSVar_171=CSValue('Wow','hdfQuery');
var __CSVar_172=CSValue('Foo','hdfQuery');
var __CSVar_170=CSOperate_dotRef(__CSVar_171,__CSVar_172);
var __CSVar_169=CSOperate_forceHDFRef(__CSVar_170);
CSVar(__CSVar_169);
CSEcho('\n');
CSEcho('\n');
CSEcho('\necho a string: hellow world\n');
//call-expand call_echo
var __CSVar_173=CSValue('hello world','string');
CSEcho('\n');
//call-expand echo
var __CSVar_174=CSValue('hello world','string');
CSEcho('\n  ');
var __CSVar_176=CSValue('hello world','string');
var __CSVar_175=CSOperate_forceHDFRef(__CSVar_176);
CSVar(__CSVar_175);
CSEcho('\n');
CSEcho('\n');
CSEcho('\necho a number: 5\n');
//call-expand call_echo
var __CSVar_178=CSValue('5','hdfQuery');
var __CSVar_177=CSOperate_forceNumber(__CSVar_178);
CSEcho('\n');
//call-expand echo
var __CSVar_180=CSValue('5','hdfQuery');
var __CSVar_179=CSOperate_forceNumber(__CSVar_180);
CSEcho('\n  ');
var __CSVar_183=CSValue('5','hdfQuery');
var __CSVar_182=CSOperate_forceNumber(__CSVar_183);
var __CSVar_181=CSOperate_forceHDFRef(__CSVar_182);
CSVar(__CSVar_181);
CSEcho('\n');
CSEcho('\n');
CSEcho('\n\n');
CSEcho('\n\n');
CSEcho('\n\nthese tests show that local variables are live in sub calls \necho a variable: 3\n');
//call-expand call_echo2
var __CSVar_185=CSValue('Wow','hdfQuery');
var __CSVar_186=CSValue('Foo','hdfQuery');
var __CSVar_184=CSOperate_dotRef(__CSVar_185,__CSVar_186);
var __CSVar_187=CSValue('error','string');
CSEcho('\n  ');
//call-expand echo2
var __CSVar_188=CSValue('error','string');
CSEcho('\n  ');
var __CSVar_190=CSValue('Wow','hdfQuery');
var __CSVar_191=CSValue('Foo','hdfQuery');
var __CSVar_189=CSOperate_dotRef(__CSVar_190,__CSVar_191);
CSVar(__CSVar_189);
CSEcho('\n');
CSEcho('\n');
CSEcho('\necho a string: hellow world\n');
//call-expand call_echo2
var __CSVar_192=CSValue('hello world','string');
var __CSVar_193=CSValue('error','string');
CSEcho('\n  ');
//call-expand echo2
var __CSVar_194=CSValue('error','string');
CSEcho('\n  ');
var __CSVar_195=CSValue('hello world','string');
CSVar(__CSVar_195);
CSEcho('\n');
CSEcho('\n');
CSEcho('\necho a number: 5\n');
//call-expand call_echo2
var __CSVar_197=CSValue('5','hdfQuery');
var __CSVar_196=CSOperate_forceNumber(__CSVar_197);
var __CSVar_198=CSValue('error','string');
CSEcho('\n  ');
//call-expand echo2
var __CSVar_199=CSValue('error','string');
CSEcho('\n  ');
var __CSVar_201=CSValue('5','hdfQuery');
var __CSVar_200=CSOperate_forceNumber(__CSVar_201);
CSVar(__CSVar_200);
CSEcho('\n');
CSEcho('\n');
CSEcho('\n\nafter echo\n\n');
CSEcho('\n\ntesting macro calls in local vars in an each\n');
var __CSVar_202=CSValue('Days','hdfQuery');
var refer = __CSVar_202;
refer = ToHDF(refer)
for(var index=0;index<refer.nodes.length;index++){
    HdfRef('day',refer.nodes[index]);
    CSEcho('\n  ');
//call-expand print_day
var __CSVar_203=CSValue('day','hdfQuery');
CSEcho('\n  ');
var __CSVar_204=CSValue('day','hdfQuery');
CSVar(__CSVar_204);
CSEcho(' == ');
var __CSVar_206=CSValue('day','hdfQuery');
var __CSVar_207=CSValue('Abbr','hdfQuery');
var __CSVar_205=CSOperate_dotRef(__CSVar_206,__CSVar_207);
CSVar(__CSVar_205);
CSEcho('\n');
CSEcho('\n  ');
//call-expand echo
var __CSVar_209=CSValue('day','hdfQuery');
var __CSVar_210=CSValue('Abbr','hdfQuery');
var __CSVar_208=CSOperate_dotRef(__CSVar_209,__CSVar_210);
CSEcho('\n  ');
var __CSVar_213=CSValue('day','hdfQuery');
var __CSVar_214=CSValue('Abbr','hdfQuery');
var __CSVar_212=CSOperate_dotRef(__CSVar_213,__CSVar_214);
var __CSVar_211=CSOperate_forceHDFRef(__CSVar_212);
CSVar(__CSVar_211);
CSEcho('\n');
CSEcho('\n');
    
}
CSEcho('\n');
};

// Generated by CoffeeScript 1.6.3
var count, end, start, _, _i;

start = Date.now();

count = 10 * 1000;

for (_ = _i = 0; 0 <= count ? _i <= count : _i >= count; _ = 0 <= count ? ++_i : --_i) {
  outputBuffers.length = 0;
  main();
  HDF.call(Dataset, json);
  outputBuffers.join("");
}

end = Date.now();

console.log(end - start, "ms");

console.log(count, "task ,", (end - start) / count, "per task");

console.log("result", outputBuffers.join(""));
