// Generated by CoffeeScript 1.6.3
var InitHDFReader;

InitHDFReader = function() {
  var hdfToJson, parseHDFDict, reg;
  reg = {};
  reg.space = /\s/i;
  reg.hdfQuery = /[a-z0-9_.]/i;
  parseHDFDict = function(string, start, hdfDict, current) {
    var index, queryStart, subQuery, value, valueEnd, valueStart;
    index = start;
    while (true) {
      while (reg.space.test(string[index])) {
        index++;
      }
      if (!string[index] || string[index] === "}") {
        return index;
      }
      queryStart = index;
      while (reg.hdfQuery.test(string[index])) {
        index++;
      }
      if (!string[index]) {
        throw new Error("Unexpect HDF End");
      }
      subQuery = string.substring(queryStart, index);
      while (new RegExp(" ", "i").test(string[index])) {
        index++;
      }
      if (string[index] === "=") {
        index++;
        while (new RegExp(" ", "i").test(string[index])) {
          index++;
        }
        valueStart = index;
        valueEnd = string.indexOf("\n", index);
        value = string.substring(valueStart, valueEnd);
        index = valueEnd + 1;
        hdfDict.push({
          path: [current, subQuery].join("."),
          value: value
        });
        continue;
      } else if (string[index] === "{") {
        index++;
        index = parseHDFDict(string, index + 1, hdfDict, [current, subQuery].join("."));
        if (string[index] !== "}") {
          throw new Error("unclosed {");
        }
        index++;
        continue;
      } else if (string[index] === ":") {
        while (new RegExp(" ", "i").test(string[index])) {
          index++;
        }
        valueStart = index;
        valueEnd = string.indexOf("\n", index);
        value = string.substring(valueStart, valueEnd);
        index = valueEnd + 1;
        hdfDict.push({
          path: [current, subQuery].join("."),
          value: value.trim(),
          refer: true
        });
        continue;
      } else {
        throw new Error("Unexpect Token at index " + index + ":" + string[index]);
      }
    }
  };
  hdfToJson = function(string) {
    var dict, item, json, route, routes, _i, _j, _len, _len1, _refer;
    dict = [];
    parseHDFDict(string, 0, dict, "root");
    json = {};
    for (_i = 0, _len = dict.length; _i < _len; _i++) {
      item = dict[_i];
      routes = item.path.split(".");
      _refer = json;
      for (_j = 0, _len1 = routes.length; _j < _len1; _j++) {
        route = routes[_j];
        if (route.indexOf("____") === 0) {
          console.warn("hdf query path can't start with ____");
          return null;
        }
        if (!_refer[route]) {
          _refer[route] = {};
        }
        _refer = _refer[route];
      }
      if (item.refer) {
        console.warn("current not support refering");
        continue;
      }
      _refer.____value = item.value;
    }
    return json.root;
  };
  if (exports) {
    exports.parseHDFDict = parseHDFDict;
    return exports.hdfToJson = hdfToJson;
  }
};

InitHDFReader();

// Generated by CoffeeScript 1.6.3
var CSEcho, CSIf, CSOperate_add, CSOperate_dotRef, CSOperate_dynamicRef, CSOperate_forceHDFRef, CSOperate_forceNumber, CSOperate_isEqual, CSValue, CSVar, Dataset, HDF, HDFPath, HdfGet, HdfRef, HdfSet, ToHDF, fs, hdfString, json, outputBuffers, _CSValue;

fs = require("fs");

HDFPath = process.argv[2];

if (!HDFPath) {
  console.log("need an hdf path");
  process.exit(0);
}

hdfString = fs.readFileSync(HDFPath).toString();

json = exports.hdfToJson(hdfString);

outputBuffers = [];

_CSValue = (function() {
  function _CSValue(value, type) {
    if (!type) {
      type = "None";
    }
    this.type = type;
    this.value = value;
  }

  _CSValue.prototype.toPrimitive = function() {
    if (this.type === "number" || this.type === "string") {
      return this.value || 0;
    }
    if (this.type === "hdfQuery") {
      if (!this.hdfNode || "") {
        this.hdfNode = Dataset.get(this.value);
      }
      return this.hdfNode.____value.toPrimitive() || "";
    }
    if (this.type === "None") {
      return "";
    }
    throw new Error("Unknow value type");
  };

  return _CSValue;

})();

CSValue = function(v, t) {
  return new _CSValue(v, t);
};

HDF = (function() {
  function HDF(json) {
    this.data = json;
    this.regulize(this.data);
  }

  HDF.prototype.regulize = function(json) {
    var item, _results;
    if (typeof json.____value !== "undefined" && !json.____value.type) {
      json.____value = CSValue(json.____value, "string");
    }
    _results = [];
    for (item in json) {
      if (item === "____value") {
        continue;
      }
      if (typeof json[item] === "string" || typeof json[item] === "number") {
        _results.push(json[item] = {
          ____value: CSValue(json[item], "string")
        });
      } else {
        _results.push(this.regulize(json[item]));
      }
    }
    return _results;
  };

  HDF.prototype.get = function(path, root) {
    var cur, pathes, route;
    if (!path) {
      throw new Error("get empty hdf");
    }
    pathes = path.split(".");
    if (!root) {
      cur = this.data;
    } else {
      cur = root;
    }
    while (pathes.length > 0) {
      route = pathes.shift();
      if (!cur[route]) {
        cur[route] = {};
      }
      if (!cur[route].____value) {
        cur[route].____value = new _CSValue();
      }
      cur = cur[route];
    }
    return cur;
  };

  HDF.prototype.set = function(path, value) {
    var cur, pathes, route;
    if (!path) {
      throw new Error("get empty hdf");
    }
    pathes = path.split(".");
    cur = this.data;
    while (pathes.length > 0) {
      route = pathes.shift();
      if (!cur[route]) {
        cur[route] = {};
      }
      if (!cur[route].____value) {
        cur[route].____value = new _CSValue();
      }
      cur = cur[route];
    }
    cur.____value = value;
    return cur;
  };

  HDF.prototype.getNode = function(path) {
    var cur, item, nodes, pathes, route;
    if (!path) {
      throw Error("get empty hdf");
    }
    pathes = path.split(".");
    cur = this.data;
    while (pathes.length > 0) {
      route = pathes.shift();
      if (!cur[route]) {
        cur[route] = {};
      }
      if (!cur[route].____value) {
        cur[route].____value = new _CSValue();
      }
      cur = cur[route];
    }
    nodes = [];
    for (item in cur) {
      if (item !== "____value") {
        if (!cur[item].____value) {
          cur[item].____value = new _CSValue();
        }
        nodes.push(cur[item]);
      }
    }
    return {
      nodes: nodes,
      ____value: cur.____value || CSValue("", "string")
    };
  };

  return HDF;

})();

Dataset = new HDF(json);

CSVar = function(value) {
  return outputBuffers.push(value.toPrimitive().toString());
};

CSEcho = function(string) {
  return outputBuffers.push(string);
};

CSIf = function(v) {
  if (v === true) {
    return true;
  }
  if (v === false) {
    return false;
  }
  if (v && v.value) {
    return true;
  }
  return false;
};

HdfSet = function(path, value) {
  if (typeof value.toPrimitive === "function") {
    return Dataset.set(path, value);
  }
};

HdfGet = function(path) {
  return Dataset.get(path);
};

HdfRef = function(ref, node) {
  return Dataset.data[ref] = node;
};

ToHDF = function(v) {
  var node;
  console.assert(v.type === "hdfQuery");
  return node = Dataset.getNode(v.value);
};

CSOperate_dynamicRef = function(v1, v2) {
  var hdfNode, path, v3;
  console.assert(v1.type === "hdfQuery");
  path = v2.toPrimitive();
  if (!v1.hdfNode) {
    v1.hdfNode = Dataset.get(v1.value);
  }
  hdfNode = Dataset.get(path, v1.hdfNode);
  v3 = CSValue(v1.value + "." + path, "hdfQuery");
  v3.hdfNode = hdfNode;
  return v3;
};

CSOperate_dotRef = function(v1, v2) {
  var e, hdfNode, path, v3;
  try {
    console.assert(v1.type === "hdfQuery");
    console.assert(v2.type === "hdfQuery");
  } catch (_error) {
    e = _error;
    throw new Error("Invalid DotRef");
  }
  path = v2.value;
  if (!v1.hdfNode) {
    v1.hdfNode = Dataset.get(v1.value);
  }
  hdfNode = Dataset.get(path, v1.hdfNode);
  v3 = CSValue(v1.value + "." + path, "hdfQuery");
  v3.hdfNode = hdfNode;
  return v3;
};

CSOperate_forceNumber = function(v) {
  if (v.type === "number") {
    return v;
  } else {
    return CSValue(parseInt(v.value) || 0, "number");
  }
};

CSOperate_add = function(v1, v2) {
  var result;
  if (!v2) {
    return v1;
  }
  result = (v1.toPrimitive() + v2.toPrimitive()) || "";
  if (typeof result === "number") {
    return CSValue(result, "number");
  } else {
    return CSValue(result.toString(), "string");
  }
};

CSOperate_isEqual = function(v1, v2) {
  return v1.toPrimitive().toString() === v2.toPrimitive().toString();
};

CSOperate_forceHDFRef = function(v) {
  return v;
};

function main(){

CSEcho('');
var __CSVar_1=CSValue('Data','hdfQuery');
var __CSVar_2=CSValue('name','string');
var __CSVar_0=CSOperate_dynamicRef(__CSVar_1,__CSVar_2);
CSVar(__CSVar_0);
CSEcho('\n');
CSEcho('\n\n\n');
CSEcho('\n\n\nbefore weekday\n\n');
//call-expand Date._weekday
var __CSVar_4=CSValue('Wow','hdfQuery');
var __CSVar_5=CSValue('Foo','hdfQuery');
var __CSVar_3=CSOperate_dotRef(__CSVar_4,__CSVar_5);
var __CSVar_7=CSValue('5','hdfQuery');
var __CSVar_6=CSOperate_forceNumber(__CSVar_7);
CSEcho('\n');
var __CSVar_8=CSValue('Days','hdfQuery');
var refer = __CSVar_8;
refer = ToHDF(refer)
for(var index=0;index<refer.nodes.length;index++){
    HdfRef('wday',refer.nodes[index]);
    CSEcho('\n  ');
(function(){
    var __CSVar_10=CSValue('wday','hdfQuery');
var __CSVar_12=CSValue('Wow','hdfQuery');
var __CSVar_13=CSValue('Foo','hdfQuery');
var __CSVar_11=CSOperate_dotRef(__CSVar_12,__CSVar_13);
var __CSVar_9=CSOperate_isEqual(__CSVar_10,__CSVar_11);
    if(CSIf(__CSVar_9)){
        CSEcho('\n    ');
var __CSVar_15=CSValue('wday','hdfQuery');
var __CSVar_16=CSValue('Abbr','hdfQuery');
var __CSVar_14=CSOperate_dotRef(__CSVar_15,__CSVar_16);
CSVar(__CSVar_14);
CSEcho('\n  ');
        return;
    }
    
    
})()
CSEcho('\n');
    
}
CSEcho('\n');
(function(){
    var __CSVar_19=CSValue('Wow','hdfQuery');
var __CSVar_20=CSValue('Foo','hdfQuery');
var __CSVar_18=CSOperate_dotRef(__CSVar_19,__CSVar_20);
var __CSVar_21=CSValue('6','string');
var __CSVar_17=CSOperate_isEqual(__CSVar_18,__CSVar_21);
    if(CSIf(__CSVar_17)){
        CSEcho('\n');
var __CSVar_24=CSValue('Days','hdfQuery');
var __CSVar_25=CSValue('0','hdfQuery');
var __CSVar_23=CSOperate_dotRef(__CSVar_24,__CSVar_25);
var __CSVar_26=CSValue('Abbr','hdfQuery');
var __CSVar_22=CSOperate_dotRef(__CSVar_23,__CSVar_26);
CSVar(__CSVar_22);
CSEcho('\n');
        return;
    }
    var __CSVar_29=CSValue('Wow','hdfQuery');
var __CSVar_30=CSValue('Foo','hdfQuery');
var __CSVar_28=CSOperate_dotRef(__CSVar_29,__CSVar_30);
var __CSVar_31=CSValue('0','string');
var __CSVar_27=CSOperate_isEqual(__CSVar_28,__CSVar_31);
if(__CSVar_27){
    CSEcho('\n');
var __CSVar_34=CSValue('Days','hdfQuery');
var __CSVar_35=CSValue('1','hdfQuery');
var __CSVar_33=CSOperate_dotRef(__CSVar_34,__CSVar_35);
var __CSVar_36=CSValue('Abbr','hdfQuery');
var __CSVar_32=CSOperate_dotRef(__CSVar_33,__CSVar_36);
CSVar(__CSVar_32);
CSEcho('\n');
    return;
}

var __CSVar_39=CSValue('Wow','hdfQuery');
var __CSVar_40=CSValue('Foo','hdfQuery');
var __CSVar_38=CSOperate_dotRef(__CSVar_39,__CSVar_40);
var __CSVar_41=CSValue('1','string');
var __CSVar_37=CSOperate_isEqual(__CSVar_38,__CSVar_41);
if(__CSVar_37){
    CSEcho('\n');
var __CSVar_44=CSValue('Days','hdfQuery');
var __CSVar_45=CSValue('2','hdfQuery');
var __CSVar_43=CSOperate_dotRef(__CSVar_44,__CSVar_45);
var __CSVar_46=CSValue('Abbr','hdfQuery');
var __CSVar_42=CSOperate_dotRef(__CSVar_43,__CSVar_46);
CSVar(__CSVar_42);
CSEcho('\n');
    return;
}

var __CSVar_49=CSValue('Wow','hdfQuery');
var __CSVar_50=CSValue('Foo','hdfQuery');
var __CSVar_48=CSOperate_dotRef(__CSVar_49,__CSVar_50);
var __CSVar_51=CSValue('2','string');
var __CSVar_47=CSOperate_isEqual(__CSVar_48,__CSVar_51);
if(__CSVar_47){
    CSEcho('\n');
var __CSVar_54=CSValue('Days','hdfQuery');
var __CSVar_55=CSValue('3','hdfQuery');
var __CSVar_53=CSOperate_dotRef(__CSVar_54,__CSVar_55);
var __CSVar_56=CSValue('Abbr','hdfQuery');
var __CSVar_52=CSOperate_dotRef(__CSVar_53,__CSVar_56);
CSVar(__CSVar_52);
CSEcho('\n');
    return;
}

var __CSVar_59=CSValue('Wow','hdfQuery');
var __CSVar_60=CSValue('Foo','hdfQuery');
var __CSVar_58=CSOperate_dotRef(__CSVar_59,__CSVar_60);
var __CSVar_61=CSValue('3','string');
var __CSVar_57=CSOperate_isEqual(__CSVar_58,__CSVar_61);
if(__CSVar_57){
    CSEcho('\n');
var __CSVar_64=CSValue('Days','hdfQuery');
var __CSVar_65=CSValue('4','hdfQuery');
var __CSVar_63=CSOperate_dotRef(__CSVar_64,__CSVar_65);
var __CSVar_66=CSValue('Abbr','hdfQuery');
var __CSVar_62=CSOperate_dotRef(__CSVar_63,__CSVar_66);
CSVar(__CSVar_62);
CSEcho('\n');
    return;
}

var __CSVar_69=CSValue('Wow','hdfQuery');
var __CSVar_70=CSValue('Foo','hdfQuery');
var __CSVar_68=CSOperate_dotRef(__CSVar_69,__CSVar_70);
var __CSVar_71=CSValue('4','string');
var __CSVar_67=CSOperate_isEqual(__CSVar_68,__CSVar_71);
if(__CSVar_67){
    CSEcho('\n');
var __CSVar_74=CSValue('Days','hdfQuery');
var __CSVar_75=CSValue('5','hdfQuery');
var __CSVar_73=CSOperate_dotRef(__CSVar_74,__CSVar_75);
var __CSVar_76=CSValue('Abbr','hdfQuery');
var __CSVar_72=CSOperate_dotRef(__CSVar_73,__CSVar_76);
CSVar(__CSVar_72);
CSEcho('\n');
    return;
}

var __CSVar_79=CSValue('Wow','hdfQuery');
var __CSVar_80=CSValue('Foo','hdfQuery');
var __CSVar_78=CSOperate_dotRef(__CSVar_79,__CSVar_80);
var __CSVar_81=CSValue('5','string');
var __CSVar_77=CSOperate_isEqual(__CSVar_78,__CSVar_81);
if(__CSVar_77){
    CSEcho('\n');
var __CSVar_84=CSValue('Days','hdfQuery');
var __CSVar_85=CSValue('6','hdfQuery');
var __CSVar_83=CSOperate_dotRef(__CSVar_84,__CSVar_85);
var __CSVar_86=CSValue('Abbr','hdfQuery');
var __CSVar_82=CSOperate_dotRef(__CSVar_83,__CSVar_86);
CSVar(__CSVar_82);
CSEcho('\n');
    return;
}

    
})()
CSEcho('\n');
CSEcho('\n\nbefore echo\n\necho a variable: 3\n');
//call-expand echo
var __CSVar_88=CSValue('Wow','hdfQuery');
var __CSVar_89=CSValue('Foo','hdfQuery');
var __CSVar_87=CSOperate_dotRef(__CSVar_88,__CSVar_89);
CSEcho('\n  ');
var __CSVar_92=CSValue('Wow','hdfQuery');
var __CSVar_93=CSValue('Foo','hdfQuery');
var __CSVar_91=CSOperate_dotRef(__CSVar_92,__CSVar_93);
var __CSVar_90=CSOperate_forceHDFRef(__CSVar_91);
CSVar(__CSVar_90);
CSEcho('\n');
CSEcho('\necho a string: hellow world\n');
//call-expand echo
var __CSVar_94=CSValue('hello world','string');
CSEcho('\n  ');
var __CSVar_96=CSValue('hello world','string');
var __CSVar_95=CSOperate_forceHDFRef(__CSVar_96);
CSVar(__CSVar_95);
CSEcho('\n');
CSEcho('\necho a number: 5\n');
//call-expand echo
var __CSVar_98=CSValue('5','hdfQuery');
var __CSVar_97=CSOperate_forceNumber(__CSVar_98);
CSEcho('\n  ');
var __CSVar_101=CSValue('5','hdfQuery');
var __CSVar_100=CSOperate_forceNumber(__CSVar_101);
var __CSVar_99=CSOperate_forceHDFRef(__CSVar_100);
CSVar(__CSVar_99);
CSEcho('\n');
CSEcho('\n\n');
CSEcho('\n\necho a variable: 3\n');
//call-expand call_echo
var __CSVar_103=CSValue('Wow','hdfQuery');
var __CSVar_104=CSValue('Foo','hdfQuery');
var __CSVar_102=CSOperate_dotRef(__CSVar_103,__CSVar_104);
CSEcho('\n');
//call-expand echo
var __CSVar_106=CSValue('Wow','hdfQuery');
var __CSVar_107=CSValue('Foo','hdfQuery');
var __CSVar_105=CSOperate_dotRef(__CSVar_106,__CSVar_107);
CSEcho('\n  ');
var __CSVar_110=CSValue('Wow','hdfQuery');
var __CSVar_111=CSValue('Foo','hdfQuery');
var __CSVar_109=CSOperate_dotRef(__CSVar_110,__CSVar_111);
var __CSVar_108=CSOperate_forceHDFRef(__CSVar_109);
CSVar(__CSVar_108);
CSEcho('\n');
CSEcho('\n');
CSEcho('\necho a string: hellow world\n');
//call-expand call_echo
var __CSVar_112=CSValue('hello world','string');
CSEcho('\n');
//call-expand echo
var __CSVar_113=CSValue('hello world','string');
CSEcho('\n  ');
var __CSVar_115=CSValue('hello world','string');
var __CSVar_114=CSOperate_forceHDFRef(__CSVar_115);
CSVar(__CSVar_114);
CSEcho('\n');
CSEcho('\n');
CSEcho('\necho a number: 5\n');
//call-expand call_echo
var __CSVar_117=CSValue('5','hdfQuery');
var __CSVar_116=CSOperate_forceNumber(__CSVar_117);
CSEcho('\n');
//call-expand echo
var __CSVar_119=CSValue('5','hdfQuery');
var __CSVar_118=CSOperate_forceNumber(__CSVar_119);
CSEcho('\n  ');
var __CSVar_122=CSValue('5','hdfQuery');
var __CSVar_121=CSOperate_forceNumber(__CSVar_122);
var __CSVar_120=CSOperate_forceHDFRef(__CSVar_121);
CSVar(__CSVar_120);
CSEcho('\n');
CSEcho('\n');
CSEcho('\n\n');
CSEcho('\n\n');
CSEcho('\n\nthese tests show that local variables are live in sub calls \necho a variable: 3\n');
//call-expand call_echo2
var __CSVar_124=CSValue('Wow','hdfQuery');
var __CSVar_125=CSValue('Foo','hdfQuery');
var __CSVar_123=CSOperate_dotRef(__CSVar_124,__CSVar_125);
var __CSVar_126=CSValue('error','string');
CSEcho('\n  ');
//call-expand echo2
var __CSVar_127=CSValue('error','string');
CSEcho('\n  ');
var __CSVar_129=CSValue('Wow','hdfQuery');
var __CSVar_130=CSValue('Foo','hdfQuery');
var __CSVar_128=CSOperate_dotRef(__CSVar_129,__CSVar_130);
CSVar(__CSVar_128);
CSEcho('\n');
CSEcho('\n');
CSEcho('\necho a string: hellow world\n');
//call-expand call_echo2
var __CSVar_131=CSValue('hello world','string');
var __CSVar_132=CSValue('error','string');
CSEcho('\n  ');
//call-expand echo2
var __CSVar_133=CSValue('error','string');
CSEcho('\n  ');
var __CSVar_134=CSValue('hello world','string');
CSVar(__CSVar_134);
CSEcho('\n');
CSEcho('\n');
CSEcho('\necho a number: 5\n');
//call-expand call_echo2
var __CSVar_136=CSValue('5','hdfQuery');
var __CSVar_135=CSOperate_forceNumber(__CSVar_136);
var __CSVar_137=CSValue('error','string');
CSEcho('\n  ');
//call-expand echo2
var __CSVar_138=CSValue('error','string');
CSEcho('\n  ');
var __CSVar_140=CSValue('5','hdfQuery');
var __CSVar_139=CSOperate_forceNumber(__CSVar_140);
CSVar(__CSVar_139);
CSEcho('\n');
CSEcho('\n');
CSEcho('\n\nafter echo\n\n');
CSEcho('\n\ntesting macro calls in local vars in an each\n');
var __CSVar_141=CSValue('Days','hdfQuery');
var refer = __CSVar_141;
refer = ToHDF(refer)
for(var index=0;index<refer.nodes.length;index++){
    HdfRef('day',refer.nodes[index]);
    CSEcho('\n  ');
//call-expand print_day
var __CSVar_142=CSValue('day','hdfQuery');
CSEcho('\n  ');
var __CSVar_143=CSValue('day','hdfQuery');
CSVar(__CSVar_143);
CSEcho(' == ');
var __CSVar_145=CSValue('day','hdfQuery');
var __CSVar_146=CSValue('Abbr','hdfQuery');
var __CSVar_144=CSOperate_dotRef(__CSVar_145,__CSVar_146);
CSVar(__CSVar_144);
CSEcho('\n');
CSEcho('\n  ');
//call-expand echo
var __CSVar_148=CSValue('day','hdfQuery');
var __CSVar_149=CSValue('Abbr','hdfQuery');
var __CSVar_147=CSOperate_dotRef(__CSVar_148,__CSVar_149);
CSEcho('\n  ');
var __CSVar_152=CSValue('day','hdfQuery');
var __CSVar_153=CSValue('Abbr','hdfQuery');
var __CSVar_151=CSOperate_dotRef(__CSVar_152,__CSVar_153);
var __CSVar_150=CSOperate_forceHDFRef(__CSVar_151);
CSVar(__CSVar_150);
CSEcho('\n');
CSEcho('\n');
    
}
CSEcho('\n');
};

// Generated by CoffeeScript 1.6.3
var count, end, start, _, _i;

start = Date.now();

count = 1;

for (_ = _i = 0; 0 <= count ? _i <= count : _i >= count; _ = 0 <= count ? ++_i : --_i) {
  outputBuffers.length = 0;
  main();
  HDF.call(Dataset, json);
  outputBuffers.join("");
}

end = Date.now();

console.log(end - start, "ms");

console.log(count, "task ,", (end - start) / count, "per task");

console.log("result", outputBuffers.join(""));
